stages:
  - build
  - alt_build
  - publish

fast-build:
  stage: build
  image: $CI_REGISTRY_IMAGE
  script:
    - pwd
    - ls -la
    - ls -la /cache
    - mv /cache/node_modules /build/
    - ls -la
    - node ./node_modules/gulp/bin/gulp build:web
  artifacts:
    paths:
      - public
    expire_in: 60 minutes
  only:
    - master

failsafe-build:
  stage: alt_build
  when: on_failure
  image: node:5
  script:
    - npm install
    - npm run postinstall
#    - node ./node_modules/gulp/bin/gulp config --env default_fr
    - node ./node_modules/gulp/bin/gulp build:web
  artifacts:
    untracked: true
    paths:
      - platforms/web
    expire_in: 60 minutes
  only:
    - master

docker-for-fast-build:
  stage: alt_build
  when: on_failure
  allow_failure: true
  tags:
    - doppler-docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo 'FROM node:5' > Dockerfile
    - echo 'WORKDIR /cache' >> Dockerfile
    - echo 'COPY ./ ./' >> Dockerfile
    - echo 'RUN du -s `find . -maxdepth 1 | egrep -v "^\.$"`>/before.txt' >> Dockerfile
    - echo 'RUN npm install' >> Dockerfile
    - echo 'RUN npm run postinstall' >> Dockerfile
    - echo 'RUN du -s `find . -maxdepth 1 | egrep -v "^\.$"`>/after.txt' >> Dockerfile
    - echo 'WORKDIR /build' >> Dockerfile
    - echo "RUN diff /before.txt /after.txt" >> Dockerfile
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"


pages:
  stage: publish
  image: node:latest
  variables:
    GIT_STRATEGY: none
  script:
    - ls -la public || true
    - mv platforms/web/www public
  artifacts:
    untracked: true
    paths:
      - public
  only:
    - master

release-web:
  stage: publish
  image: node:latest
  variables:
    GIT_STRATEGY: none
  script:
    - ls -la www || true
    - mv platforms/web/www www
  artifacts:
    untracked: true
    paths:
      - www
  only:
    - tags

